//
// Created by ziyue on 2021/6/13.
//

#ifndef LUACOMPILER_RENEW_BYTESTREAMREADER_H
#define LUACOMPILER_RENEW_BYTESTREAMREADER_H

#include <string>
#include "byte.h"
#include "chunkStruct.h"

/*The following two function are used to read bytes from luafiles,
 * notice that it cannot be used to read codes of lua. It can only read
 * bytes from compiled lua program.
 * filename : the name of bystream file which generated by lua compiler
 * gcount   : the number of bytes which will be read by file
 * stepsize : the number of bytes read by the program in each step, no matter what value,
 * the program will read the file correctly. However, lower stepsize will lower the efficiency,
 * higher stepsize may waste the space.
 * */

byte * readByteStream(const std::string & filename);
byte * readByteStream(const std::string & filename, long long & gcount, long long stepSize);

/* This function is used to print byte stream. Always being used to debug
 *
 * data : bytestream pointer
 * gcount: the number of bytes which is needed to be printed.
 * interval: the number of bytes showed in each line;
 * */
void printByteStream(byte * data, long long gcount, int interval);



/* The following class -- reader is used to analysis byte stream
 * data : byte pointer of byteStream
 * use it in Undump function, not to use it in other places.
 * */
class reader{
private:
    byte* data;
public:
    reader(byte*);
    ~reader();
    byte readByte();
    uint32_t readUint32();
    uint64_t readUint64();
    int64_t readLuaInteger();
    double readLuaNumber();
    std::string readString();
    byte* readBytes(size_t n);
    void checkHeader();
    bool checkSignature();
    bool checkLuaData();
    Prototype* readProto(std::string);
    std::vector<uint32_t> * readCode();
    luaValue readConstant();
    std::vector<luaValue> * readConstants();
    std::vector<Upvalue> * readUpvalues();
    std::vector<Prototype*> * readProtos(const std::string& parentSource);
    std::vector<uint32_t> * readLineInfo();
    std::vector<LocVar> * readLocVars();
    std::vector<std::string> * readUpvalueNames();
};

/* The following function is used to print some basic information for Prototype
 * f : Pointer of prototype
 * */

void byteStreamSimpleAnalysis(Prototype* f);

#endif //LUACOMPILER_RENEW_BYTESTREAMREADER_H
